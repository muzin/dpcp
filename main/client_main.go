package main

import (
	"fmt"
	"github.com/muzin/dpcp"
	"github.com/muzin/go_rt/net"
	"github.com/muzin/go_rt/try"
)

func main() {

	//bytes1 := []byte{1, 2, 3}
	//bytes1 := []byte(nil)
	//bytes2 := []byte{4,5,6}
	//
	//bytes3 := append(bytes1, bytes2...)
	//
	//fmt.Println(bytes3)

	session := dpcp.NewSession()

	session.SetMTU(65535)

	session.OnConnect(func(args ...interface{}) {
		fmt.Printf("session connect")

		message := session.NewMessage()
		message.SetDataType(dpcp.DATA)
		//message.SetProtocol(IPv6)
		message.DataProxy(true)
		//message.SetSessionNo(dpcp.GenSnowFlakeId())
		message.SetSerialNo(1)
		message.SetSrcPort(5540)
		message.SetSrcAddr([]byte{192, 168, 1, 103})
		message.SetDestPort(5541)
		message.SetDestAddr([]byte{192, 168, 1, 105})

		message.AddHeader("title", "title")
		message.AddHeader("key", "value\U0001F970")

		message.SetData([]byte{
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
			192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105, 192, 168, 1, 105,
		})

		//array := message.ToByteArray()
		//
		//parseMessage := dpcp.ParseMessage(array)
		//
		//dpcp.ValidateMessage(array)
		//
		//fmt.Printf("%v", parseMessage)

		//for i := 0; i < len(array); i++ {
		//	fmt.Print(strconv.Itoa(int(array[i])) + ", ")
		//}

		for i := 0; i < 100000; i++ {
			session.SendMsg(*message)
			//time.Sleep(10 * time.Millisecond)
		}
	})

	byteCnt := 0
	pkgCnt := 0

	session.OnData(func(args ...interface{}) {
		bytes := args[0].([]byte)
		byteCnt += len(bytes)
		pkgCnt += 1
		//fmt.Printf("on data: %v %v\r", byteCnt, pkgCnt)
		//fmt.Printf("on data: %v\n", bytes)

	})

	//session.OnMessage(func(msg dpcp.Message){
	//
	//	//fmt.Printf("receive msg: %v\r", msg.GetSerialNo())
	//
	//})

	session.OnClose(func(args ...interface{}) {
		fmt.Println("close")
	})

	session.OnEnd(func(args ...interface{}) {
		fmt.Printf("end\n")
	})

	session.OnError(func(args ...interface{}) {
		throwable := args[0].(try.Throwable)
		fmt.Printf("error: %v\n", throwable)
	})

	session.Connect(7747, "127.0.0.1")

	//timer.SetTimeout(func(){
	//
	//
	//
	//}, 1000)

	fmt.Printf("want\n")

	//timer.SetTimeout(func(){
	//	session.Close()
	//}, 30000)

	net.ExitAfterSocketEnd()

}
